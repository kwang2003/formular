grammar Formular;
expr: expr op=('*'|'/') expr 			# MulDiv
    | expr op=('+'|'-') expr			# AddSub
    | INTEGER				 			# Integer
    | REAL_NUMBER			 			# RealNumberPositive
    | '(-'expr')' 			 			# RealNumberNegative
    | expr INDEX expr		 			# Index
    | LOGARITHM'('expr',' expr')'		# Logarithm
    | LOGARITHM'('expr')'	 			# Logarithm
    | NATURAL_LOGARITHM'('expr')'	 	# NaturalLogarithm
    | SQUARE_ROOT'('expr')'				# SquareRoot
    | SINE'('expr')'		 			# Sine
    | COSINE'('expr')'		 			# Cosine
    | TANGENT'('expr')'		 			# Tangent
    | COTANGENT'('expr')'	 			# Cotangent
    | SECANT'('expr')'		 			# Secant
    | COSECANT'('expr')'	 			# Cosecant
    | '('expr')'             			# Parens
    | ABS'('expr')'                     # abs
    | MAX'('expr (','expr)*')'			# max
    | OTHER					 			# Other
    ;


ABS									:[aA][bB][sS];				//绝对值
MAX									:[mM][aA][xX];				//返回一组值中的最大值。MAX(number1, [number2], ...)
INTEGER: [0-9]+;
REAL_NUMBER: INTEGER* DOT INTEGER+ ;
ADDITION: '+' ;
SUBTRACTION: '-' ;
MULTIPLICATION: '*' ;
DIVISION: '/' ;
NEW_LINE: '\n' ;
WHITE_SPACE : [ \t\r]+ -> skip ;
DOT: '.' ;
EULERS_NUMBER: 'e'|'E';

SINE: 'Sin'|'sin'|'SIN';
COSINE: 'Cos'|'cos'|'COS';
TANGENT: 'Tan'|'tan'|'TAN';
COTANGENT: 'Cot'|'cot'|'COT';
SECANT: 'Sec'|'sec'|'SEC';
COSECANT: 'Cosec'|'cosec'|'COSEC';

INDEX: '^';
LOGARITHM: 'log'|'LOG'|'Log';
NATURAL_LOGARITHM: 'ln'|'LN'|'Ln';
SQUARE_ROOT: 'sqrt'|'Sqrt'|'SQRT';

OTHER: [a-zA-Z0-9]+;